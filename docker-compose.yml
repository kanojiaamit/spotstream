

services:
  kafka:
    image: apache/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'INTERNAL://:29092,EXTERNAL://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - spotstream_network
    volumes:
      - ./kraft-data:/tmp/kraft-combined-logs
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:29092"]
      interval: 10s
      timeout: 10s
      retries: 5
    command: >
      bash -c "if [ ! -f /tmp/kraft-combined-logs/meta.properties ]; then
        /opt/kafka/bin/kafka-storage.sh format --ignore-formatted -t $$(/opt/kafka/bin/kafka-storage.sh random-uuid) -c /opt/kafka/config/kraft/server.properties;
      fi &&
      /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/kraft/server.properties"

  spotify-producer:
    build: ./spotify-producer
    container_name: spotify-producer
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER_URL=kafka:29092
    env_file:
      - .env
    volumes:
      - ./spotify-producer:/app  # For code reloading in development

  spark_processor:
    build: ./spark_streaming  # Path to directory with Dockerfile and script
    container_name: spark_processor
    depends_on:
      - kafka
    environment:
      SPARK_MASTER_URL: local[*]
    networks:
      - spotstream_network
    volumes:
      - ./spark_streaming:/app

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    networks:
      - spotstream_network

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: spotifydb
    ports:
      - "5432:5432"
    networks:
      - spotstream_network

  airflow-scheduler:
    image: apache/airflow:2.8.1  # Use specific version
    container_name: airflow_scheduler
    depends_on:
      - postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock  # For DockerOperator
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres:5432/spotifydb
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW_UID: 1000
    networks:
      - spotstream_network
    command: scheduler

  airflow-webserver:
    image: apache/airflow:2.8.1
    container_name: airflow_webserver
    depends_on:
      - airflow-scheduler
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@postgres:5432/spotifydb
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW_UID: 1000
    networks:
      - spotstream_network
    command: webserver
    
networks:
  spotstream_network:
    name: spotstream_network
    driver: bridge
  